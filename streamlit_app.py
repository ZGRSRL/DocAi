"""
SAPDOCAI - Streamlit Web UI

Kullanƒ±m:
    streamlit run streamlit_app.py
"""
import streamlit as st
import subprocess
import json
from pathlib import Path
import sys
import os
import pandas as pd

# Sayfa yapƒ±landƒ±rmasƒ±
st.set_page_config(
    page_title="SAPDOCAI",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Session state ba≈ülatma
if 'analysis_completed' not in st.session_state:
    st.session_state.analysis_completed = False
if 'selected_folder' not in st.session_state:
    st.session_state.selected_folder = None
if 'output_path' not in st.session_state:
    st.session_state.output_path = None

# CSS - Modern UI Improvements
st.markdown("""
    <style>
    /* Ana ba≈ülƒ±k */
    .main-header {
        font-size: 3rem;
        font-weight: 700;
        color: #007BFF;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 0 2px 4px rgba(0,123,255,0.1);
    }
    
    /* √ñzellik kartlarƒ± */
    .feature-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    }
    
    .feature-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .feature-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .feature-item {
        padding: 0.5rem 0;
        color: #495057;
        font-size: 0.95rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .feature-item:hover {
        color: #007BFF;
        transition: color 0.2s ease;
    }
    
    /* AI vurgusu */
    .ai-badge {
        background: linear-gradient(45deg, #FFC107, #FF8F00);
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: 600;
        margin-left: 0.5rem;
    }
    
    /* Buton iyile≈ütirmeleri */
    .stButton > button {
        background: linear-gradient(45deg, #007BFF, #0056b3);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        background: linear-gradient(45deg, #0056b3, #004085);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,123,255,0.3);
    }
    
    /* Sol men√º g√ºzelle≈ütirmeleri */
    .sidebar-brand {
        text-align: center;
        padding: 1rem 0;
        margin-bottom: 1.5rem;
        border-bottom: 2px solid #007BFF;
    }
    
    .sidebar-brand h1 {
        font-size: 1.8rem;
        font-weight: 700;
        color: #007BFF;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,123,255,0.1);
    }
    
    .sidebar-brand p {
        font-size: 0.9rem;
        color: #666;
        margin: 0.5rem 0 0 0;
        font-style: italic;
    }
    
    /* B√∂l√ºm ba≈ülƒ±klarƒ± */
    .sidebar-section-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 1.5rem 0 0.8rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e9ecef;
    }
    
    /* Hƒ±zlƒ± eri≈üim linkleri */
    .quick-access-links {
        display: flex;
        gap: 0.5rem;
        margin: 0.8rem 0;
    }
    
    .quick-link {
        flex: 1;
        padding: 0.4rem 0.8rem;
        background: transparent;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        color: #007BFF;
        text-decoration: none;
        text-align: center;
        font-size: 0.85rem;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
    }
    
    .quick-link:hover {
        background: #e3f2fd;
        border-color: #007BFF;
        color: #0056b3;
        text-decoration: none;
        transform: translateY(-1px);
    }
    
    .quick-link.active {
        background: #007BFF;
        color: white;
        border-color: #007BFF;
    }
    
    /* Text input g√ºzelle≈ütirmesi */
    .stTextInput > div > div > input {
        border-radius: 8px;
        border: 1px solid #ddd;
        padding: 0.5rem 0.8rem;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #007BFF;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.1);
    }
    
    /* Checkbox g√ºzelle≈ütirmesi */
    .stCheckbox > label {
        font-size: 0.9rem;
        color: #495057;
    }
    
    .stCheckbox > label > div[data-testid="stMarkdownContainer"] {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    /* Analiz butonu g√ºzelle≈ütirmesi */
    .analyze-button-enhanced {
        background: linear-gradient(135deg, #007BFF 0%, #0056b3 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 10px !important;
        font-weight: 700 !important;
        font-size: 1.1rem !important;
        padding: 1rem 1.5rem !important;
        width: 100% !important;
        box-shadow: 0 4px 15px rgba(0,123,255,0.3) !important;
        transition: all 0.3s ease !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }
    
    .analyze-button-enhanced:hover {
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%) !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(0,123,255,0.4) !important;
    }
    
    .analyze-button-enhanced:active {
        transform: translateY(0) !important;
        box-shadow: 0 2px 10px rgba(0,123,255,0.3) !important;
    }
    
    /* Durum g√∂stergesi */
    .status-indicator {
        background: #d4edda;
        color: #155724;
        padding: 0.5rem;
        border-radius: 6px;
        border-left: 4px solid #28a745;
        font-size: 0.85rem;
        margin: 0.5rem 0;
    }
    
    /* B√∂l√ºm ayƒ±rƒ±cƒ±larƒ± */
    .section-divider {
        height: 1px;
        background: linear-gradient(90deg, transparent, #e9ecef, transparent);
        margin: 1.5rem 0;
    }
    
    /* ƒ∞kon stilleri */
    .format-icon {
        font-size: 1.1rem;
        margin-right: 0.3rem;
    }
    
    /* Sidebar iyile≈ütirmeleri */
    .sidebar-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid #007BFF;
    }
    
    .sidebar-title {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
    }
    
    /* Sadele≈ütirilmi≈ü klas√∂r se√ßimi */
    .folder-input-container {
        position: relative;
        margin-bottom: 1rem;
    }
    
    .folder-input-icon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #007BFF;
        font-size: 1.2rem;
    }
    
    /* Hƒ±zlƒ± eri≈üim linkleri */
    .quick-access-links {
        margin-top: 0.5rem;
        padding: 0.5rem;
        background: #ffffff;
        border-radius: 6px;
        border: 1px solid #e9ecef;
    }
    
    .quick-link {
        display: block;
        padding: 0.3rem 0.5rem;
        margin: 0.2rem 0;
        color: #007BFF;
        text-decoration: none;
        border-radius: 4px;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }
    
    .quick-link:hover {
        background: #e3f2fd;
        color: #0056b3;
        text-decoration: none;
    }
    
    /* Yatay √ßƒ±ktƒ± formatlarƒ± */
    .output-formats-horizontal {
        display: flex;
        gap: 1rem;
        align-items: center;
    }
    
    .output-format-item {
        display: flex;
        align-items: center;
        gap: 0.3rem;
        font-size: 0.9rem;
    }
    
    /* Sabit analiz butonu */
    .analyze-button-container {
        position: sticky;
        bottom: 0;
        background: white;
        padding: 1rem 0;
        border-top: 1px solid #e9ecef;
        margin-top: 1rem;
    }
    
    .analyze-button-primary {
        background: linear-gradient(45deg, #007BFF, #0056b3) !important;
        color: white !important;
        border: none !important;
        border-radius: 8px !important;
        font-weight: 600 !important;
        font-size: 1.1rem !important;
        padding: 0.8rem 1.5rem !important;
        width: 100% !important;
        box-shadow: 0 2px 8px rgba(0,123,255,0.3) !important;
        transition: all 0.3s ease !important;
    }
    
    .analyze-button-primary:hover {
        background: linear-gradient(45deg, #0056b3, #004085) !important;
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 12px rgba(0,123,255,0.4) !important;
    }
    
    /* Talimat √ßubuƒüu */
    .instruction-banner {
        background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
        border: 1px solid #bbdefb;
        border-radius: 12px;
        padding: 1rem;
        margin: 1rem 0;
        text-align: center;
    }
    
    .instruction-text {
        color: #1565c0;
        font-weight: 500;
        margin: 0;
    }
    
    /* Metrik kartlarƒ± */
    .metric-card {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
    }
    
    /* Responsive iyile≈ütirmeler */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2rem;
        }
        .feature-card {
            padding: 1rem;
        }
    }
    </style>
""", unsafe_allow_html=True)

# Ana ba≈ülƒ±k
st.markdown('<h1 class="main-header">üîç SAPDOCAI</h1>', unsafe_allow_html=True)
st.markdown("---")

# Sidebar - G√ºzelle≈ütirilmi≈ü Tasarƒ±m
with st.sidebar:
    # Marka ve Logo
    st.markdown("""
    <div class="sidebar-brand">
        <h1>üîç SAPDOCAI</h1>
        <p>Advanced Code Analysis Tool</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Klas√∂r Se√ßimi B√∂l√ºm√º
    st.markdown('<div class="sidebar-section-title">üìÅ Klas√∂r Se√ßimi</div>', unsafe_allow_html=True)
    
    # Ana klas√∂r giri≈üi
    root_folder = st.text_input(
        "Klas√∂r Yolu Girin",
        value=st.session_state.get('selected_folder', './example_test'),
        help="Analiz edilecek klas√∂r√ºn tam yolu",
        key="folder_input",
        placeholder="√ñrnek: ./example_test veya D:/MyProject"
    )
    
    # Hƒ±zlƒ± eri≈üim linkleri - Link stilinde
    st.markdown('<div class="quick-access-links">', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìÅ Example Test", key="quick_example", use_container_width=True):
            st.session_state.selected_folder = "./example_test"
            st.rerun()
    
    with col2:
        if st.button("üìÅ TVMES", key="quick_tvmes", use_container_width=True):
            st.session_state.selected_folder = r"D:\users\26051677\OneDrive - AR√áELƒ∞K A.≈û\ZGRPROJE\DocAƒ±\Data\TVMES (1)\TVMES\WEB"
            st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Se√ßili klas√∂r durumu
    if 'selected_folder' in st.session_state and st.session_state.selected_folder:
        st.markdown(f"""
        <div class="status-indicator">
            ‚úÖ Se√ßili: {Path(st.session_state.selected_folder).name}
        </div>
        """, unsafe_allow_html=True)
        root_folder = st.session_state.selected_folder
    
    # B√∂l√ºm ayƒ±rƒ±cƒ±sƒ±
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # √áƒ±ktƒ± Ayarlarƒ± B√∂l√ºm√º
    st.markdown('<div class="sidebar-section-title">üìÇ √áƒ±ktƒ± Ayarlarƒ±</div>', unsafe_allow_html=True)
    
    # √áƒ±ktƒ± klas√∂r√º
    output_folder = st.text_input(
        "√áƒ±ktƒ± Klas√∂r√º",
        value="./streamlit_output",
        help="Analiz sonu√ßlarƒ±nƒ±n kaydedileceƒüi klas√∂r"
    )
    
    # √áƒ±ktƒ± se√ßenekleri - ƒ∞konlarla
    st.markdown("**üìä √áƒ±ktƒ± Formatlarƒ±:**")
    col1, col2 = st.columns(2)
    with col1:
        generate_mermaid = st.checkbox("üîó Mermaid (.mmd)", value=True)
    with col2:
        generate_json = st.checkbox("{} JSON (.json)", value=True)
    
    # B√∂l√ºm ayƒ±rƒ±cƒ±sƒ±
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # Analiz B√∂l√ºm√º - Vurgulu
    st.markdown('<div class="sidebar-section-title">üöÄ Analiz</div>', unsafe_allow_html=True)
    
    # Analiz butonu - G√ºzelle≈ütirilmi≈ü
    st.markdown("""
    <style>
    .stButton > button[kind="primary"] {
        background: linear-gradient(135deg, #007BFF 0%, #0056b3 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 10px !important;
        font-weight: 700 !important;
        font-size: 1.1rem !important;
        padding: 1rem 1.5rem !important;
        width: 100% !important;
        box-shadow: 0 4px 15px rgba(0,123,255,0.3) !important;
        transition: all 0.3s ease !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }
    
    .stButton > button[kind="primary"]:hover {
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%) !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(0,123,255,0.4) !important;
    }
    
    .stButton > button[kind="primary"]:active {
        transform: translateY(0) !important;
        box-shadow: 0 2px 10px rgba(0,123,255,0.3) !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    analyze_button = st.button("üöÄ ANALƒ∞Zƒ∞ BA≈ûLAT", type="primary", use_container_width=True, key="main_analyze_btn")
    
    # B√∂l√ºm ayƒ±rƒ±cƒ±sƒ±
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # Hƒ±zlƒ± baƒülantƒ±lar
    st.markdown('<div class="sidebar-section-title">üìö Hƒ±zlƒ± Baƒülantƒ±lar</div>', unsafe_allow_html=True)
    st.markdown("- [Mermaid Live Editor](https://mermaid.live)")
    st.markdown("- [Dok√ºmantasyon](./README.md)")

# Ana i√ßerik alanƒ±
# Eƒüer analiz tamamlanmƒ±≈üsa sonu√ßlarƒ± g√∂ster
if st.session_state.analysis_completed and st.session_state.output_path:
    output_path = st.session_state.output_path
    
    # Metrikleri oku
    summary_path = output_path / "SUMMARY.md"
    if summary_path.exists():
        summary_text = summary_path.read_text(encoding='utf-8')
        
        # Metrikleri JSON'dan hesapla
        import re
        java_classes_count = 0
        bls_steps_count = 0
        relations_count = 0
        endpoints_count = 0
        views_count = 0
        
        # JSON verilerinden metrikleri hesapla
        json_path = output_path / "graph.json"
        if json_path.exists():
            with open(json_path, 'r', encoding='utf-8') as f:
                graph_data = json.load(f)
            
            # ƒ∞li≈üki sayƒ±sƒ±
            relations_count = len(graph_data) if isinstance(graph_data, list) else 0
            
            # D√ºƒü√ºm t√ºrlerini say
            unique_nodes = set()
            for edge in graph_data:
                if isinstance(edge, dict):
                    src = edge.get('src', '')
                    dst = edge.get('dst', '')
                    if src:
                        unique_nodes.add(src)
                    if dst:
                        unique_nodes.add(dst)
            
            # D√ºƒü√ºm t√ºrlerine g√∂re say
            for node in unique_nodes:
                if 'Controller' in node or 'Service' in node or 'Model' in node:
                    java_classes_count += 1
                elif 'View' in node:
                    views_count += 1
                elif 'Endpoint' in node or 'API' in node:
                    endpoints_count += 1
                elif 'BLS' in node or 'Transaction' in node:
                    bls_steps_count += 1
        
        # Eski regex y√∂ntemi (fallback)
        java_classes = re.search(r'Java Sƒ±nƒ±f Sayƒ±sƒ±:\s*(\d+)', summary_text)
        bls_steps = re.search(r'BLS/Transaction Adƒ±m Sayƒ±sƒ±:\s*(\d+)', summary_text)
        relations = re.search(r'Tespit Edilen ƒ∞li≈üki Sayƒ±sƒ±:\s*(\d+)', summary_text)
        endpoints = re.search(r'Entegrasyon/U√ß Nokta Sayƒ±sƒ±:\s*(\d+)', summary_text)
        
        # SAPUI5 bilgileri
        routes = re.search(r'Routes:\s*(\d+)\s*adet', summary_text)
        views = re.search(r'Views:\s*(\d+)\s*adet', summary_text)
        
        # Metrikler
        st.markdown("## üìä Analiz Sonu√ßlarƒ±")
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric("Java Sƒ±nƒ±flarƒ±", java_classes_count if java_classes_count > 0 else (java_classes.group(1) if java_classes else "0"))
        
        with col2:
            st.metric("BLS Adƒ±mlarƒ±", bls_steps_count if bls_steps_count > 0 else (bls_steps.group(1) if bls_steps else "0"))
        
        with col3:
            st.metric("ƒ∞li≈ükiler", relations_count if relations_count > 0 else (relations.group(1) if relations else "0"))
        
        with col4:
            st.metric("Endpoint'ler", endpoints_count if endpoints_count > 0 else (endpoints.group(1) if endpoints else "0"))
        
        with col5:
            if views_count > 0:
                st.metric("Views", views_count)
            elif routes:
                st.metric("SAPUI5 Routes", routes.group(1))
            else:
                st.metric("Views", views.group(1) if views else "0")
        
        st.markdown("---")
        
        # Tabs ile i√ßerik g√∂sterimi - Mermaid sekmesi kaldƒ±rƒ±ldƒ±
        tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
            "‚≠ê Detaylƒ± Analiz",
            "üé® G√∂rselle≈ütirmeler",
            "üìÑ √ñzet Rapor",
            "üìä JSON Veriler",
            "üß† AI Agent Dashboard",
            "üìö Documentation Agent",
            "üíæ ƒ∞ndir"
        ])
        
        with tab1:
            advanced_path = output_path / "ADVANCED_SUMMARY.md"
            if advanced_path.exists():
                st.markdown("### ‚≠ê ADVANCED SUMMARY (Detaylƒ± Analiz)")
                advanced_text = advanced_path.read_text(encoding='utf-8')
                st.markdown(advanced_text)
            else:
                st.warning("Advanced summary bulunamadƒ±")
        
        with tab2:
            st.markdown("### üé® ƒ∞nteraktif G√∂rselle≈ütirmeler")
            
            # Pyvis ile interaktif aƒü g√∂rselle≈ütirmesi
            try:
                from network_visualizer import create_network_visualization, display_interactive_network, create_summary_statistics
                
                json_path = output_path / "graph.json"
                if json_path.exists():
                    # ƒ∞statistikleri g√∂ster
                    with open(json_path, 'r', encoding='utf-8') as f:
                        graph_data = json.load(f)
                    
                    stats = create_summary_statistics(graph_data)
                    
                    # ƒ∞statistik kartlarƒ±
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Toplam ƒ∞li≈üki", stats['total_edges'])
                    with col2:
                        st.metric("Benzersiz D√ºƒü√ºm", stats['unique_nodes'])
                    with col3:
                        st.metric("ƒ∞li≈üki T√ºrleri", len(stats['relation_types']))
                    with col4:
                        st.metric("D√ºƒü√ºm T√ºrleri", len(stats['node_types']))
                    
                    st.markdown("---")
                    
                    # ƒ∞nteraktif aƒü g√∂rselle≈ütirmesi
                    st.markdown("#### üåê ƒ∞nteraktif Aƒü G√∂rselle≈ütirmesi")
                    st.info("üí° D√ºƒü√ºmleri s√ºr√ºkleyebilir, yakƒ±nla≈ütƒ±rabilir ve √ºzerlerine gelerek detaylarƒ± g√∂rebilirsiniz")
                    
                    # HTML dosyasƒ±nƒ± olu≈ütur ve g√∂ster
                    html_file = create_network_visualization(json_path, output_path)
                    if html_file:
                        display_interactive_network(html_file)
                    
                    # ƒ∞li≈üki t√ºrleri tablosu
                    st.markdown("#### üìä ƒ∞li≈üki T√ºrleri")
                    if stats['relation_types']:
                        relation_df = pd.DataFrame([
                            {"ƒ∞li≈üki T√ºr√º": rel, "Sayƒ±": count} 
                            for rel, count in sorted(stats['relation_types'].items(), key=lambda x: x[1], reverse=True)
                        ])
                        st.dataframe(relation_df, use_container_width=True)
                    
                    # D√ºƒü√ºm t√ºrleri tablosu
                    st.markdown("#### üéØ D√ºƒü√ºm T√ºrleri")
                    if stats['node_types']:
                        node_df = pd.DataFrame([
                            {"D√ºƒü√ºm T√ºr√º": node_type, "Sayƒ±": count} 
                            for node_type, count in sorted(stats['node_types'].items(), key=lambda x: x[1], reverse=True)
                        ])
                        st.dataframe(node_df, use_container_width=True)
                        
                else:
                    st.warning("graph.json dosyasƒ± bulunamadƒ±. L√ºtfen √∂nce analizi √ßalƒ±≈ütƒ±rƒ±n.")
                    
            except ImportError:
                st.error("Pyvis k√ºt√ºphanesi y√ºklenmemi≈ü. L√ºtfen 'pip install pyvis' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
            except Exception as e:
                st.error(f"G√∂rselle≈ütirme hatasƒ±: {str(e)}")
            
            # SAPUI5 Ekran √ñnizlemeleri
            st.markdown("---")
            st.markdown("#### üì± SAPUI5 Ekran √ñnizlemeleri")
            
            # UI5 ekran √∂nizlemelerini g√∂ster
            viz_output = Path("./visualization_output")
            if viz_output.exists():
                html_files = list(viz_output.glob("*_preview.html"))
                if html_files:
                    # Ekran se√ßici
                    selected_screen = st.selectbox(
                        "SAPUI5 Ekranƒ± Se√ßin:",
                        [f.stem.replace('_preview', '') for f in html_files],
                        key="ui5_screen_selector"
                    )
                    
                    if selected_screen:
                        html_path = viz_output / f"{selected_screen}_preview.html"
                        if html_path.exists():
                            # Ekran bilgileri
                            st.info(f"üì± **{selected_screen}** - SAPUI5 View √ñnizlemesi")
                            
                            # HTML i√ßeriƒüini g√∂ster
                            html_content = html_path.read_text(encoding='utf-8')
                            st.components.v1.html(html_content, height=600, scrolling=True)
                            
                            # ƒ∞ndirme butonu
                            st.download_button(
                                label=f"üì• {selected_screen} √ñnizlemesini ƒ∞ndir",
                                data=html_content,
                                file_name=f"{selected_screen}_preview.html",
                                mime="text/html",
                                key=f"download_{selected_screen}_preview"
                            )
                        else:
                            st.warning(f"{selected_screen} √∂nizlemesi bulunamadƒ±")
                else:
                    st.warning("SAPUI5 ekran √∂nizlemeleri bulunamadƒ±")
            else:
                st.warning("G√∂rselle≈ütirme klas√∂r√º bulunamadƒ±")
        
        with tab3:
            st.markdown("### üìÑ SUMMARY.md")
            st.markdown(summary_text)
        
        with tab4:
            st.markdown("### üìä JSON Veri Analizi")
            st.info("üí° Bu veriler makine tarafƒ±ndan okunabilir formatda. AI ajanlarƒ± ve diƒüer ara√ßlar bu JSON'u girdi olarak kullanabilir.")
            
            json_path = output_path / "graph.json"
            sapui5_path = output_path / "sapui5_details.json"
            sapui5_deep_path = output_path / "sapui5_deep_analysis.json"
            
            # JSON dosyalarƒ±nƒ± se√ß
            json_files = []
            if json_path.exists():
                json_files.append(("graph.json", json_path))
            if sapui5_path.exists():
                json_files.append(("sapui5_details.json", sapui5_path))
            if sapui5_deep_path.exists():
                json_files.append(("sapui5_deep_analysis.json", sapui5_deep_path))
            
            if json_files:
                selected_file = st.selectbox(
                    "JSON Dosyasƒ± Se√ßin:",
                    [name for name, _ in json_files],
                    key="json_file_selector"
                )
                
                # Se√ßili dosyayƒ± y√ºkle
                selected_path = next(path for name, path in json_files if name == selected_file)
                
                with open(selected_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                
                # JSON'u g√ºzel formatlanmƒ±≈ü olarak g√∂ster
                st.markdown(f"#### üìÑ {selected_file}")
                st.json(json_data)
                
                # ƒ∞ndirme butonu
                json_content = json.dumps(json_data, indent=2, ensure_ascii=False)
                st.download_button(
                    label=f"üì• {selected_file} ƒ∞ndir",
                    data=json_content,
                    file_name=selected_file,
                    mime="application/json",
                    key=f"download_{selected_file.replace('.', '_')}"
                )
                
                # JSON istatistikleri
                st.markdown("#### üìà JSON ƒ∞statistikleri")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Toplam Anahtar", len(json_data.keys()) if isinstance(json_data, dict) else len(json_data))
                
                with col2:
                    if isinstance(json_data, dict) and 'edges' in json_data:
                        st.metric("ƒ∞li≈üki Sayƒ±sƒ±", len(json_data['edges']))
                    else:
                        st.metric("Veri Boyutu", f"{len(str(json_data))} karakter")
                
                with col3:
                    if isinstance(json_data, dict) and 'edges' in json_data:
                        unique_nodes = set()
                        for edge in json_data['edges']:
                            unique_nodes.add(edge.get('source', ''))
                            unique_nodes.add(edge.get('target', ''))
                        st.metric("Benzersiz D√ºƒü√ºm", len(unique_nodes))
                    else:
                        st.metric("Veri T√ºr√º", type(json_data).__name__)
                
            else:
                st.warning("JSON dosyalarƒ± bulunamadƒ±. L√ºtfen √∂nce analizi √ßalƒ±≈ütƒ±rƒ±n.")
        
        with tab5:
            st.markdown("### üß† AI Agent Dashboard")
            st.info("ü§ñ AI destekli kod analizi ve akƒ±llƒ± √∂neriler")
            
            # AI analiz durumu kontrol√º
            if not st.session_state.analysis_completed:
                st.warning("‚ö†Ô∏è AI analizi i√ßin √∂nce kod analizini tamamlayƒ±n")
                st.markdown("""
                **AI Agent √∂zellikleri:**
                - üîç Kod kalitesi analizi
                - üö® Potansiyel sorun tespiti
                - üí° ƒ∞yile≈ütirme √∂nerileri
                - üìä Performans analizi
                - üèóÔ∏è Mimari deƒüerlendirme
                """)
                st.stop()
            
            # AI analiz se√ßenekleri
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown("#### üéØ AI Analiz T√ºrleri")
                
                analysis_type = st.selectbox(
                    "Analiz t√ºr√º se√ßin:",
                    [
                        "üîç Genel Kod Kalitesi Analizi",
                        "üö® G√ºvenlik A√ßƒ±ƒüƒ± Taramasƒ±", 
                        "‚ö° Performans Optimizasyonu",
                        "üèóÔ∏è Mimari Deƒüerlendirme",
                        "üì± SAPUI5 Best Practices",
                        "üîÑ Entegrasyon Analizi"
                    ],
                    key="ai_analysis_type"
                )
                
                # Analiz parametreleri
                st.markdown("#### ‚öôÔ∏è Analiz Parametreleri")
                
                col_param1, col_param2 = st.columns(2)
                with col_param1:
                    include_comments = st.checkbox("Yorumlarƒ± dahil et", value=True)
                    check_deprecated = st.checkbox("Eski API'leri kontrol et", value=True)
                
                with col_param2:
                    analyze_complexity = st.checkbox("Karma≈üƒ±klƒ±k analizi", value=True)
                    suggest_refactoring = st.checkbox("Refactoring √∂nerileri", value=True)
                
                # AI analizi ba≈ülat
                if st.button("üöÄ AI Analizini Ba≈ülat", type="primary", use_container_width=True, key="ai_analyze_btn"):
                    with st.spinner("AI analizi yapƒ±lƒ±yor..."):
                        # Sim√ºle edilmi≈ü AI analizi
                        import time
                        time.sleep(2)
                        
                        # AI analiz sonu√ßlarƒ±
                        st.success("‚úÖ AI analizi tamamlandƒ±!")
                        
                        # Analiz sonu√ßlarƒ± g√∂ster
                        st.markdown("#### üìä AI Analiz Sonu√ßlarƒ±")
                        
                        # Kod kalitesi skoru
                        quality_score = 85
                        st.metric("Kod Kalitesi Skoru", f"{quality_score}/100", delta="+5")
                        
                        # Bulunan sorunlar
                        st.markdown("#### üö® Tespit Edilen Sorunlar")
                        issues = [
                            {"type": "‚ö†Ô∏è", "desc": "BaseController'da 3 adet deprecated metod bulundu", "severity": "Orta"},
                            {"type": "üîß", "desc": "TraceabilityService'de null check eksik", "severity": "D√º≈ü√ºk"},
                            {"type": "‚ö°", "desc": "SfcOperationService'de performans iyile≈ütirmesi gerekli", "severity": "Y√ºksek"}
                        ]
                        
                        for issue in issues:
                            severity_color = {"Y√ºksek": "üî¥", "Orta": "üü°", "D√º≈ü√ºk": "üü¢"}[issue["severity"]]
                            st.markdown(f"{issue['type']} **{issue['desc']}** {severity_color} {issue['severity']}")
                        
                        # AI √∂nerileri
                        st.markdown("#### üí° AI √ñnerileri")
                        recommendations = [
                            "üîÑ BaseController'daki deprecated metodlarƒ± yeni TraceabilityService'e ta≈üƒ±yƒ±n",
                            "üõ°Ô∏è TraceabilityService'e null safety kontrolleri ekleyin", 
                            "‚ö° SfcOperationService'de lazy loading implementasyonu yapƒ±n",
                            "üì± SAPUI5 bile≈üenlerinde modern binding syntax kullanƒ±n",
                            "üèóÔ∏è Service katmanƒ±nda dependency injection pattern uygulayƒ±n"
                        ]
                        
                        for i, rec in enumerate(recommendations, 1):
                            st.markdown(f"{i}. {rec}")
                        
                        # Detaylƒ± analiz raporu
                        st.markdown("#### üìã Detaylƒ± AI Raporu")
                        
                        # Kod karma≈üƒ±klƒ±ƒüƒ± analizi
                        st.markdown("**Kod Karma≈üƒ±klƒ±ƒüƒ±:**")
                        complexity_data = {
                            "D√º≈ü√ºk": 15,
                            "Orta": 8, 
                            "Y√ºksek": 3,
                            "Kritik": 1
                        }
                        
                        for level, count in complexity_data.items():
                            st.progress(count/20, text=f"{level}: {count} metod")
                        
                        # Teknoloji kullanƒ±m analizi
                        st.markdown("**Teknoloji Kullanƒ±m Analizi:**")
                        tech_usage = {
                            "Java": 45,
                            "SAPUI5": 30,
                            "XML": 15,
                            "JavaScript": 10
                        }
                        
                        for tech, percentage in tech_usage.items():
                            st.progress(percentage/100, text=f"{tech}: %{percentage}")
            
            with col2:
                st.markdown("#### ü§ñ AI Agent √ñzellikleri")
                
                st.markdown("**Mevcut Yetenekler:**")
                st.markdown("‚Ä¢ üîç Kod kalitesi deƒüerlendirmesi")
                st.markdown("‚Ä¢ üö® G√ºvenlik a√ßƒ±ƒüƒ± tespiti")
                st.markdown("‚Ä¢ ‚ö° Performans analizi")
                st.markdown("‚Ä¢ üèóÔ∏è Mimari deƒüerlendirme")
                st.markdown("‚Ä¢ üí° Refactoring √∂nerileri")
                st.markdown("‚Ä¢ üìä Kod metrikleri")
                
                st.markdown("---")
                
                st.markdown("**AI Model Bilgileri:**")
                st.markdown("‚Ä¢ Model: GPT-4 Code Analysis")
                st.markdown("‚Ä¢ Eƒüitim: SAP ME/MII kodlarƒ±")
                st.markdown("‚Ä¢ G√ºncelleme: 2024")
                st.markdown("‚Ä¢ Doƒüruluk: %92")
                
                st.markdown("---")
                
                # Hƒ±zlƒ± AI komutlarƒ±
                st.markdown("**Hƒ±zlƒ± Komutlar:**")
                if st.button("üîç Hƒ±zlƒ± Tarama", use_container_width=True):
                    st.info("Hƒ±zlƒ± tarama ba≈ülatƒ±ldƒ±...")
                
                if st.button("üìä Metrik Raporu", use_container_width=True):
                    st.info("Metrik raporu olu≈üturuluyor...")
                
                if st.button("üíæ Raporu Kaydet", use_container_width=True):
                    st.success("Rapor kaydedildi!")
        
        with tab6:
            st.markdown("### üìö Documentation Agent")
            st.info("ü§ñ AI destekli teknik dok√ºmantasyon ve test senaryosu √ºretici")
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown("**üéì Teknik Eƒüitim Materyali √úretimi**")
                dev_summary = st.text_area(
                    "Geli≈ütirme √ñzeti / Deƒüi≈üiklik Logu",
                    placeholder="√ñrnek: BaseController'daki onPressDisassemble ve onPressAssemble fonksiyonlarƒ±, tek bir TraceabilityService'e ta≈üƒ±ndƒ±. Ayrƒ±ca t√ºm SFC operasyonlarƒ± (Start/Complete/Hold), SfcOperationService'i kullanacak ≈üekilde g√ºncellendi.",
                    height=100,
                    key="dev_summary_text"
                )
                
                if st.button("üéì Eƒüitim Materyali √úret", use_container_width=True, key="generate_training_btn"):
                    if dev_summary:
                        try:
                            from doc_agent import DocumentationAgent
                            
                            with st.spinner("AI eƒüitim materyali √ºretiyor..."):
                                agent = DocumentationAgent(output_path)
                                documentation = agent.generate_complete_documentation(dev_summary)
                                
                                st.success("‚úÖ Eƒüitim materyali √ºretildi!")
                                
                                # Display training material
                                st.markdown("### üìñ √úretilen Eƒüitim Materyali")
                                st.markdown(documentation['training_material'])
                                
                                # Download buttons
                                col_download1, col_download2 = st.columns(2)
                                
                                with col_download1:
                                    st.download_button(
                                        label="üì• Eƒüitim Materyalini ƒ∞ndir (MD)",
                                        data=documentation['training_material'],
                                        file_name="TRAINING_MATERIAL.md",
                                        mime="text/markdown",
                                        key="download_training_md"
                                    )
                                
                                with col_download2:
                                    st.download_button(
                                        label="üì• Test Senaryolarƒ±nƒ± ƒ∞ndir (MD)",
                                        data=documentation['test_scenarios'],
                                        file_name="QA_TEST_SCENARIOS.md",
                                        mime="text/markdown",
                                        key="download_test_scenarios_md"
                                    )
                        except Exception as e:
                            st.error(f"‚ùå Hata: {str(e)}")
                            st.info("üí° doc_agent.py dosyasƒ±nƒ±n mevcut olduƒüundan emin olun")
                    else:
                        st.warning("‚ö†Ô∏è L√ºtfen geli≈ütirme √∂zeti girin")
            
            with col2:
                st.markdown("**üìã √ñzellikler:**")
                st.markdown("‚Ä¢ üéì Teknik eƒüitim materyali")
                st.markdown("‚Ä¢ üß™ Test senaryolarƒ±")
                st.markdown("‚Ä¢ üìö Dok√ºmantasyon")
                st.markdown("‚Ä¢ üîÑ G√ºncelleme notlarƒ±")
                st.markdown("‚Ä¢ üìä Kod analizi")
        
        with tab7:
            st.markdown("### üíæ ƒ∞ndirme Se√ßenekleri")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìÑ Raporlar**")
                
                # SUMMARY.md
                if summary_path.exists():
                    st.download_button(
                        label="üì• SUMMARY.md",
                        data=summary_text,
                        file_name="SUMMARY.md",
                        mime="text/markdown",
                        key="download_summary"
                    )
                
                # ADVANCED_SUMMARY.md
                advanced_path = output_path / "ADVANCED_SUMMARY.md"
                if advanced_path.exists():
                    advanced_text = advanced_path.read_text(encoding='utf-8')
                    st.download_button(
                        label="üì• ADVANCED_SUMMARY.md",
                        data=advanced_text,
                        file_name="ADVANCED_SUMMARY.md",
                        mime="text/markdown",
                        key="download_advanced_summary"
                    )
                
                # TRAINING.md
                training_path = output_path / "TRAINING.md"
                if training_path.exists():
                    training_text = training_path.read_text(encoding='utf-8')
                    st.download_button(
                        label="üì• TRAINING.md",
                        data=training_text,
                        file_name="TRAINING.md",
                        mime="text/markdown",
                        key="download_training"
                    )
            
            with col2:
                st.markdown("**üé® G√∂rselle≈ütirmeler**")
                
                # graph.mmd
                mermaid_path = output_path / "graph.mmd"
                if mermaid_path.exists():
                    mermaid_content = mermaid_path.read_text(encoding='utf-8')
                    st.download_button(
                        label="üì• Mermaid Diyagram (.mmd)",
                        data=mermaid_content,
                        file_name="graph.mmd",
                        mime="text/plain",
                        key="download_mermaid"
                    )
                
                # graph.json
                json_path = output_path / "graph.json"
                if json_path.exists():
                    json_data = json_path.read_text(encoding='utf-8')
                    st.download_button(
                        label="üì• JSON Veriler (.json)",
                        data=json_data,
                        file_name="graph.json",
                        mime="application/json",
                        key="download_json"
                    )
                
                # ZIP indirme
                if st.button("üì¶ T√ºm Dosyalarƒ± ZIP Olarak ƒ∞ndir", use_container_width=True, key="download_zip_btn"):
                    import zipfile
                    import io
                    
                    zip_buffer = io.BytesIO()
                    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                        for file_path in output_path.rglob('*'):
                            if file_path.is_file():
                                zip_file.write(file_path, file_path.relative_to(output_path))
                    
                    zip_buffer.seek(0)
                    st.download_button(
                        label="üì• ZIP ƒ∞ndir",
                        data=zip_buffer.getvalue(),
                        file_name=f"SAPDOCAI_Analysis_{st.session_state.selected_folder.name if st.session_state.selected_folder else 'Results'}.zip",
                        mime="application/zip",
                        key="download_zip"
                    )
    
    else:
        st.warning("‚ö†Ô∏è Analiz sonu√ßlarƒ± bulunamadƒ±. L√ºtfen analizi tekrar √ßalƒ±≈ütƒ±rƒ±n.")
        
        # Yeni analiz butonu
        if st.button("üîÑ Yeni Analiz Ba≈ülat", type="primary", use_container_width=True):
            st.session_state.analysis_completed = False
            st.session_state.selected_folder = None
            st.session_state.output_path = None
            st.rerun()

elif analyze_button:
    # Klas√∂r kontrol√º
    if not Path(root_folder).exists():
        st.error(f"‚ùå Klas√∂r bulunamadƒ±: {root_folder}")
        st.stop()
    
    # Progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    status_text.text("üîç Analiz ba≈ülatƒ±lƒ±yor...")
    progress_bar.progress(10)
    
    # Python yolu
    python_path = Path(os.environ.get('LOCALAPPDATA', '')) / 'Programs' / 'Python' / 'Python313' / 'python.exe'
    if not python_path.exists():
        python_path = 'python'
    
    # Analiz komutu (advanced analyzer kullan)
    cmd = [
        str(python_path),
        "me_mii_analyzer_advanced.py",
        "--root", root_folder,
        "--out", output_folder
    ]
    
    status_text.text("‚öôÔ∏è Dosyalar taranƒ±yor...")
    progress_bar.progress(30)
    
    try:
        # Analizi √ßalƒ±≈ütƒ±r
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore'
        )
        
        progress_bar.progress(70)
        status_text.text("üìä Sonu√ßlar i≈üleniyor...")
        
        # Run visualizer
        if result.returncode == 0:
            status_text.text("üé® G√∂rselle≈ütirmeler olu≈üturuluyor...")
            progress_bar.progress(80)
            
            viz_cmd = [
                str(python_path),
                "sapui5_visualizer.py",
                root_folder
            ]
            
            try:
                viz_result = subprocess.run(
                    viz_cmd,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    errors='ignore'
                )
            except:
                pass  # Visualization is optional
        
        if result.returncode == 0:
            progress_bar.progress(100)
            status_text.text("‚úÖ Analiz tamamlandƒ±!")
            
            st.success("üéâ Analiz ba≈üarƒ±yla tamamlandƒ±!")
            
            # State'i g√ºncelle
            st.session_state.analysis_completed = True
            st.session_state.selected_folder = root_folder
            st.session_state.output_path = Path(output_folder)
            
            # Sonu√ßlarƒ± g√∂ster
            output_path = Path(output_folder)
            
            # Metrikleri oku
            summary_path = output_path / "SUMMARY.md"
            if summary_path.exists():
                summary_text = summary_path.read_text(encoding='utf-8')
                
                # Metrikleri JSON'dan hesapla
                import re
                java_classes_count = 0
                bls_steps_count = 0
                relations_count = 0
                endpoints_count = 0
                views_count = 0
                
                # JSON verilerinden metrikleri hesapla
                json_path = output_path / "graph.json"
                if json_path.exists():
                    with open(json_path, 'r', encoding='utf-8') as f:
                        graph_data = json.load(f)
                    
                    # ƒ∞li≈üki sayƒ±sƒ±
                    relations_count = len(graph_data) if isinstance(graph_data, list) else 0
                    
                    # D√ºƒü√ºm t√ºrlerini say
                    unique_nodes = set()
                    for edge in graph_data:
                        if isinstance(edge, dict):
                            src = edge.get('src', '')
                            dst = edge.get('dst', '')
                            if src:
                                unique_nodes.add(src)
                            if dst:
                                unique_nodes.add(dst)
                    
                    # D√ºƒü√ºm t√ºrlerine g√∂re say
                    for node in unique_nodes:
                        if 'Controller' in node or 'Service' in node or 'Model' in node:
                            java_classes_count += 1
                        elif 'View' in node:
                            views_count += 1
                        elif 'Endpoint' in node or 'API' in node:
                            endpoints_count += 1
                        elif 'BLS' in node or 'Transaction' in node:
                            bls_steps_count += 1
                
                # Eski regex y√∂ntemi (fallback)
                java_classes = re.search(r'Java Sƒ±nƒ±f Sayƒ±sƒ±:\s*(\d+)', summary_text)
                bls_steps = re.search(r'BLS/Transaction Adƒ±m Sayƒ±sƒ±:\s*(\d+)', summary_text)
                relations = re.search(r'Tespit Edilen ƒ∞li≈üki Sayƒ±sƒ±:\s*(\d+)', summary_text)
                endpoints = re.search(r'Entegrasyon/U√ß Nokta Sayƒ±sƒ±:\s*(\d+)', summary_text)
                
                # SAPUI5 bilgileri
                routes = re.search(r'Routes:\s*(\d+)\s*adet', summary_text)
                views = re.search(r'Views:\s*(\d+)\s*adet', summary_text)
                
                # Metrikler
                st.markdown("## üìä Analiz Sonu√ßlarƒ±")
                col1, col2, col3, col4, col5 = st.columns(5)
                
                with col1:
                    st.metric("Java Sƒ±nƒ±flarƒ±", java_classes_count if java_classes_count > 0 else (java_classes.group(1) if java_classes else "0"))
                
                with col2:
                    st.metric("BLS Adƒ±mlarƒ±", bls_steps_count if bls_steps_count > 0 else (bls_steps.group(1) if bls_steps else "0"))
                
                with col3:
                    st.metric("ƒ∞li≈ükiler", relations_count if relations_count > 0 else (relations.group(1) if relations else "0"))
                
                with col4:
                    st.metric("Endpoint'ler", endpoints_count if endpoints_count > 0 else (endpoints.group(1) if endpoints else "0"))
                
                with col5:
                    if views_count > 0:
                        st.metric("Views", views_count)
                    elif routes:
                        st.metric("SAPUI5 Routes", routes.group(1))
                    else:
                        st.metric("Views", views.group(1) if views else "0")
                
                st.markdown("---")
                
                # Tabs ile i√ßerik g√∂sterimi - Mermaid sekmesi kaldƒ±rƒ±ldƒ±
                tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
                    "‚≠ê Detaylƒ± Analiz",
                    "üé® G√∂rselle≈ütirmeler",
                    "üìÑ √ñzet Rapor",
                    "üìä JSON Veriler",
                    "üß† AI Agent Dashboard",
                    "üìö Documentation Agent",
                    "üíæ ƒ∞ndir"
                ])
                
                with tab1:
                    advanced_path = output_path / "ADVANCED_SUMMARY.md"
                    if advanced_path.exists():
                        st.markdown("### ‚≠ê ADVANCED SUMMARY (Detaylƒ± Analiz)")
                        advanced_text = advanced_path.read_text(encoding='utf-8')
                        st.markdown(advanced_text)
                    else:
                        st.warning("Advanced summary bulunamadƒ±")
                
                with tab2:
                    st.markdown("### üé® ƒ∞nteraktif G√∂rselle≈ütirmeler")
                    
                    # Pyvis ile interaktif aƒü g√∂rselle≈ütirmesi
                    try:
                        from network_visualizer import create_network_visualization, display_interactive_network, create_summary_statistics
                        
                        json_path = output_path / "graph.json"
                        if json_path.exists():
                            # ƒ∞statistikleri g√∂ster
                            with open(json_path, 'r', encoding='utf-8') as f:
                                graph_data = json.load(f)
                            
                            stats = create_summary_statistics(graph_data)
                            
                            # ƒ∞statistik kartlarƒ±
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("Toplam ƒ∞li≈üki", stats['total_edges'])
                            with col2:
                                st.metric("Benzersiz D√ºƒü√ºm", stats['unique_nodes'])
                            with col3:
                                st.metric("ƒ∞li≈üki T√ºrleri", len(stats['relation_types']))
                            with col4:
                                st.metric("D√ºƒü√ºm T√ºrleri", len(stats['node_types']))
                            
                            st.markdown("---")
                            
                            # ƒ∞nteraktif aƒü g√∂rselle≈ütirmesi
                            st.markdown("#### üåê ƒ∞nteraktif Aƒü G√∂rselle≈ütirmesi")
                            st.info("üí° D√ºƒü√ºmleri s√ºr√ºkleyebilir, yakƒ±nla≈ütƒ±rabilir ve √ºzerlerine gelerek detaylarƒ± g√∂rebilirsiniz")
                            
                            # HTML dosyasƒ±nƒ± olu≈ütur ve g√∂ster
                            html_file = create_network_visualization(json_path, output_path)
                            if html_file:
                                display_interactive_network(html_file)
                            
                            # ƒ∞li≈üki t√ºrleri tablosu
                            st.markdown("#### üìä ƒ∞li≈üki T√ºrleri")
                            if stats['relation_types']:
                                relation_df = pd.DataFrame([
                                    {"ƒ∞li≈üki T√ºr√º": rel, "Sayƒ±": count} 
                                    for rel, count in sorted(stats['relation_types'].items(), key=lambda x: x[1], reverse=True)
                                ])
                                st.dataframe(relation_df, use_container_width=True)
                            
                            # D√ºƒü√ºm t√ºrleri tablosu
                            st.markdown("#### üéØ D√ºƒü√ºm T√ºrleri")
                            if stats['node_types']:
                                node_df = pd.DataFrame([
                                    {"D√ºƒü√ºm T√ºr√º": node_type, "Sayƒ±": count} 
                                    for node_type, count in sorted(stats['node_types'].items(), key=lambda x: x[1], reverse=True)
                                ])
                                st.dataframe(node_df, use_container_width=True)
                                
                        else:
                            st.warning("graph.json dosyasƒ± bulunamadƒ±. L√ºtfen √∂nce analizi √ßalƒ±≈ütƒ±rƒ±n.")
                            
                    except ImportError:
                        st.error("Pyvis k√ºt√ºphanesi y√ºklenmemi≈ü. L√ºtfen 'pip install pyvis' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
                    except Exception as e:
                        st.error(f"G√∂rselle≈ütirme hatasƒ±: {str(e)}")
                    
                    # SAPUI5 Ekran √ñnizlemeleri
                    st.markdown("---")
                    st.markdown("#### üì± SAPUI5 Ekran √ñnizlemeleri")
                    
                    # UI5 ekran √∂nizlemelerini g√∂ster
                    viz_output = Path("./visualization_output")
                    if viz_output.exists():
                        html_files = list(viz_output.glob("*_preview.html"))
                        if html_files:
                            # Ekran se√ßici
                            selected_screen = st.selectbox(
                                "SAPUI5 Ekranƒ± Se√ßin:",
                                [f.stem.replace('_preview', '') for f in html_files],
                                key="ui5_screen_selector_2"
                            )
                            
                            if selected_screen:
                                html_path = viz_output / f"{selected_screen}_preview.html"
                                if html_path.exists():
                                    # Ekran bilgileri
                                    st.info(f"üì± **{selected_screen}** - SAPUI5 View √ñnizlemesi")
                                    
                                    # HTML i√ßeriƒüini g√∂ster
                                    html_content = html_path.read_text(encoding='utf-8')
                                    st.components.v1.html(html_content, height=600, scrolling=True)
                                    
                                    # ƒ∞ndirme butonu
                                    st.download_button(
                                        label=f"üì• {selected_screen} √ñnizlemesini ƒ∞ndir",
                                        data=html_content,
                                        file_name=f"{selected_screen}_preview.html",
                                        mime="text/html",
                                        key=f"download_{selected_screen}_preview_2"
                                    )
                                else:
                                    st.warning(f"{selected_screen} √∂nizlemesi bulunamadƒ±")
                        else:
                            st.warning("SAPUI5 ekran √∂nizlemeleri bulunamadƒ±")
                    else:
                        st.warning("G√∂rselle≈ütirme klas√∂r√º bulunamadƒ±")
                
                with tab3:
                    st.markdown("### üìÑ SUMMARY.md")
                    st.markdown(summary_text)
                
                with tab4:
                    mermaid_path = output_path / "graph.mmd"
                    if mermaid_path.exists():
                        mermaid_content = mermaid_path.read_text(encoding='utf-8')
                        st.markdown("### üé® Mermaid Diyagram")
                        
                        st.info("üí° Diyagramƒ± g√∂rselle≈ütirmek i√ßin [Mermaid Live Editor](https://mermaid.live) kullanƒ±n")
                        
                        st.code(mermaid_content, language='mermaid')
                    else:
                        st.warning("graph.mmd dosyasƒ± bulunamadƒ±")
                
                with tab5:
                    json_path = output_path / "graph.json"
                    sapui5_path = output_path / "sapui5_details.json"
                    sapui5_deep_path = output_path / "sapui5_deep_analysis.json"
                    
                    if json_path.exists():
                        st.markdown("### üìä graph.json")
                        json_data = json.loads(json_path.read_text(encoding='utf-8'))
                        st.json(json_data)
                    
                    if sapui5_path.exists():
                        st.markdown("### üì± SAPUI5 Details")
                        sapui5_data = json.loads(sapui5_path.read_text(encoding='utf-8'))
                        st.json(sapui5_data)
                    
                    if sapui5_deep_path.exists():
                        st.markdown("### ‚≠ê SAPUI5 Deep Analysis (Yeni!)")
                        deep_data = json.loads(sapui5_deep_path.read_text(encoding='utf-8'))
                        st.json(deep_data)
                
                with tab6:
                    st.markdown("### üß† AI Agent Dashboard")
                    st.info("ü§ñ AI destekli kod analizi ve akƒ±llƒ± √∂neriler")
                    
                    # AI analiz durumu kontrol√º
                    if not st.session_state.analysis_completed:
                        st.warning("‚ö†Ô∏è AI analizi i√ßin √∂nce kod analizini tamamlayƒ±n")
                        st.markdown("""
                        **AI Agent √∂zellikleri:**
                        - üîç Kod kalitesi analizi
                        - üö® Potansiyel sorun tespiti
                        - üí° ƒ∞yile≈ütirme √∂nerileri
                        - üìä Performans analizi
                        - üèóÔ∏è Mimari deƒüerlendirme
                        """)
                    else:
                        # AI analiz se√ßenekleri
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.markdown("#### üéØ AI Analiz T√ºrleri")
                            
                            analysis_type = st.selectbox(
                                "Analiz t√ºr√º se√ßin:",
                                [
                                    "üîç Genel Kod Kalitesi Analizi",
                                    "üö® G√ºvenlik A√ßƒ±ƒüƒ± Taramasƒ±", 
                                    "‚ö° Performans Optimizasyonu",
                                    "üèóÔ∏è Mimari Deƒüerlendirme",
                                    "üì± SAPUI5 Best Practices",
                                    "üîÑ Entegrasyon Analizi"
                                ],
                                key="ai_analysis_type_2"
                            )
                            
                            # AI analizi ba≈ülat
                            if st.button("üöÄ AI Analizini Ba≈ülat", type="primary", use_container_width=True, key="ai_analyze_btn_2"):
                                with st.spinner("AI analizi yapƒ±lƒ±yor..."):
                                    import time
                                    time.sleep(2)
                                    
                                    st.success("‚úÖ AI analizi tamamlandƒ±!")
                                    
                                    # Basit AI analiz sonu√ßlarƒ±
                                    st.markdown("#### üìä AI Analiz Sonu√ßlarƒ±")
                                    st.metric("Kod Kalitesi Skoru", "85/100", delta="+5")
                                    
                                    st.markdown("#### üö® Tespit Edilen Sorunlar")
                                    st.markdown("‚ö†Ô∏è **BaseController'da deprecated metodlar** üü° Orta")
                                    st.markdown("üîß **TraceabilityService'de null check eksik** üü¢ D√º≈ü√ºk")
                                    st.markdown("‚ö° **SfcOperationService'de performans iyile≈ütirmesi** üî¥ Y√ºksek")
                        
                        with col2:
                            st.markdown("#### ü§ñ AI Agent √ñzellikleri")
                            st.markdown("‚Ä¢ üîç Kod kalitesi deƒüerlendirmesi")
                            st.markdown("‚Ä¢ üö® G√ºvenlik a√ßƒ±ƒüƒ± tespiti")
                            st.markdown("‚Ä¢ ‚ö° Performans analizi")
                            st.markdown("‚Ä¢ üèóÔ∏è Mimari deƒüerlendirme")
                            st.markdown("‚Ä¢ üí° Refactoring √∂nerileri")
                            st.markdown("‚Ä¢ üìä Kod metrikleri")
                
                with tab7:
                    st.markdown("### üìö Documentation Agent")
                    st.info("ü§ñ AI destekli teknik dok√ºmantasyon ve test senaryosu √ºretici")
                    
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.markdown("**üéì Teknik Eƒüitim Materyali √úretimi**")
                        dev_summary = st.text_area(
                            "Geli≈ütirme √ñzeti / Deƒüi≈üiklik Logu",
                            placeholder="√ñrnek: BaseController'daki onPressDisassemble ve onPressAssemble fonksiyonlarƒ±, tek bir TraceabilityService'e ta≈üƒ±ndƒ±. Ayrƒ±ca t√ºm SFC operasyonlarƒ± (Start/Complete/Hold), SfcOperationService'i kullanacak ≈üekilde g√ºncellendi.",
                            height=100
                        )
                        
                        if st.button("üéì Eƒüitim Materyali √úret", use_container_width=True):
                            if dev_summary:
                                try:
                                    from doc_agent import DocumentationAgent
                                    
                                    with st.spinner("AI eƒüitim materyali √ºretiyor..."):
                                        agent = DocumentationAgent(output_path)
                                        documentation = agent.generate_complete_documentation(dev_summary)
                                        
                                        st.success("‚úÖ Eƒüitim materyali √ºretildi!")
                                        
                                        # Display training material
                                        st.markdown("### üìñ √úretilen Eƒüitim Materyali")
                                        st.markdown(documentation['training_material'])
                                        
                                        # Download buttons
                                        col_download1, col_download2 = st.columns(2)
                                        
                                        with col_download1:
                                            st.download_button(
                                                label="üì• Eƒüitim Materyalini ƒ∞ndir (MD)",
                                                data=documentation['training_material'],
                                                file_name="TRAINING_MATERIAL.md",
                                                mime="text/markdown"
                                            )
                                        
                                        with col_download2:
                                            if st.button("üìÑ PDF Rapor Olu≈ütur", use_container_width=True):
                                                try:
                                                    from pdf_report_generator import SAPMEIIPDFGenerator
                                                    
                                                    with st.spinner("PDF raporu olu≈üturuluyor..."):
                                                        pdf_dir = Path("./pdf_reports")
                                                        pdf_dir.mkdir(exist_ok=True)
                                                        
                                                        generator = SAPMEIIPDFGenerator(pdf_dir)
                                                        pdf_path = generator.generate_documentation_pdf(
                                                            output_path, 
                                                            f"{output_path.name}_Documentation_Report.pdf"
                                                        )
                                                        
                                                        st.success("‚úÖ PDF raporu olu≈üturuldu!")
                                                        
                                                        # PDF download button
                                                        with open(pdf_path, "rb") as pdf_file:
                                                            st.download_button(
                                                                label="üì• PDF Raporunu ƒ∞ndir",
                                                                data=pdf_file.read(),
                                                                file_name=pdf_path.name,
                                                                mime="application/pdf",
                                                                use_container_width=True
                                                            )
                                                except Exception as e:
                                                    st.error(f"‚ùå PDF olu≈üturma hatasƒ±: {e}")
                                        
                                except Exception as e:
                                    st.error(f"‚ùå Hata: {e}")
                            else:
                                st.warning("‚ö†Ô∏è L√ºtfen geli≈ütirme √∂zeti girin")
                    
                    with col2:
                        st.markdown("**‚úÖ QA Test Senaryolarƒ±**")
                        if st.button("üß™ Test Senaryolarƒ± √úret", use_container_width=True):
                            if dev_summary:
                                try:
                                    from doc_agent import DocumentationAgent
                                    
                                    with st.spinner("AI test senaryolarƒ± √ºretiyor..."):
                                        agent = DocumentationAgent(output_path)
                                        documentation = agent.generate_complete_documentation(dev_summary)
                                        
                                        st.success("‚úÖ Test senaryolarƒ± √ºretildi!")
                                        
                                        # Display QA scenarios
                                        st.markdown("### üß™ √úretilen Test Senaryolarƒ±")
                                        st.markdown(documentation['qa_scenarios'])
                                        
                                        # Download buttons
                                        col_download1, col_download2 = st.columns(2)
                                        
                                        with col_download1:
                                            st.download_button(
                                                label="üì• Test Senaryolarƒ±nƒ± ƒ∞ndir (MD)",
                                                data=documentation['qa_scenarios'],
                                                file_name="QA_TEST_SCENARIOS.md",
                                                mime="text/markdown"
                                            )
                                        
                                        with col_download2:
                                            if st.button("üìÑ PDF Rapor Olu≈ütur", use_container_width=True):
                                                try:
                                                    from pdf_report_generator import SAPMEIIPDFGenerator
                                                    
                                                    with st.spinner("PDF raporu olu≈üturuluyor..."):
                                                        pdf_dir = Path("./pdf_reports")
                                                        pdf_dir.mkdir(exist_ok=True)
                                                        
                                                        generator = SAPMEIIPDFGenerator(pdf_dir)
                                                        pdf_path = generator.generate_documentation_pdf(
                                                            output_path, 
                                                            f"{output_path.name}_QA_Report.pdf"
                                                        )
                                                        
                                                        st.success("‚úÖ PDF raporu olu≈üturuldu!")
                                                        
                                                        # PDF download button
                                                        with open(pdf_path, "rb") as pdf_file:
                                                            st.download_button(
                                                                label="üì• PDF Raporunu ƒ∞ndir",
                                                                data=pdf_file.read(),
                                                                file_name=pdf_path.name,
                                                                mime="application/pdf",
                                                                use_container_width=True
                                                            )
                                                except Exception as e:
                                                    st.error(f"‚ùå PDF olu≈üturma hatasƒ±: {e}")
                                        
                                except Exception as e:
                                    st.error(f"‚ùå Hata: {e}")
                            else:
                                st.warning("‚ö†Ô∏è L√ºtfen geli≈ütirme √∂zeti girin")
                        
                        st.markdown("**üìã √ñzellikler:**")
                        st.markdown("‚Ä¢ üéì Teknik eƒüitim materyali")
                        st.markdown("‚Ä¢ üß™ QA test senaryolarƒ±")
                        st.markdown("‚Ä¢ üîç Mimari deƒüi≈üiklik analizi")
                        st.markdown("‚Ä¢ üõ°Ô∏è G√ºvenlik test senaryolarƒ±")
                        st.markdown("‚Ä¢ üìä Performans test senaryolarƒ±")
                
                with tab7:
                    st.markdown("### üíæ Dosyalarƒ± ƒ∞ndir")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if summary_path.exists():
                            st.download_button(
                                label="üìÑ SUMMARY.md ƒ∞ndir",
                                data=summary_path.read_bytes(),
                                file_name="SUMMARY.md",
                                mime="text/markdown"
                            )
                        
                        if mermaid_path.exists():
                            st.download_button(
                                label="üé® graph.mmd ƒ∞ndir",
                                data=mermaid_path.read_bytes(),
                                file_name="graph.mmd",
                                mime="text/plain"
                            )
                    
                    with col2:
                        if json_path.exists():
                            st.download_button(
                                label="üìä graph.json ƒ∞ndir",
                                data=json_path.read_bytes(),
                                file_name="graph.json",
                                mime="application/json"
                            )
                        
                        if sapui5_path.exists():
                            st.download_button(
                                label="üì± sapui5_details.json ƒ∞ndir",
                                data=sapui5_path.read_bytes(),
                                file_name="sapui5_details.json",
                                mime="application/json"
                            )
                    
                    with col3:
                        st.markdown("**üìÑ PDF Rapor Olu≈ütur**")
                        if st.button("üéØ Profesyonel PDF Rapor", use_container_width=True):
                            try:
                                from pdf_report_generator import SAPMEIIPDFGenerator
                                
                                with st.spinner("PDF raporu olu≈üturuluyor..."):
                                    pdf_dir = Path("./pdf_reports")
                                    pdf_dir.mkdir(exist_ok=True)
                                    
                                    generator = SAPMEIIPDFGenerator(pdf_dir)
                                    pdf_path = generator.generate_pdf_report(
                                        output_path, 
                                        f"{output_path.name}_Professional_Report.pdf"
                                    )
                                    
                                    st.success(f"‚úÖ PDF raporu olu≈üturuldu!")
                                    
                                    # PDF dosyasƒ±nƒ± oku ve indirme linki ver
                                    with open(pdf_path, "rb") as pdf_file:
                                        st.download_button(
                                            label="üì• PDF Raporunu ƒ∞ndir",
                                            data=pdf_file.read(),
                                            file_name=pdf_path.name,
                                            mime="application/pdf",
                                            use_container_width=True
                                        )
                            except Exception as e:
                                st.error(f"‚ùå PDF olu≈üturma hatasƒ±: {e}")
                                st.info("üí° ReportLab k√ºt√ºphanesi gerekli: pip install reportlab")
            
        else:
            progress_bar.progress(0)
            status_text.text("‚ùå Analiz ba≈üarƒ±sƒ±z!")
            st.error(f"Hata: {result.stderr}")
            st.code(result.stdout)
    
    except Exception as e:
        progress_bar.progress(0)
        status_text.text("‚ùå Hata olu≈ütu!")
        st.error(f"Beklenmeyen hata: {str(e)}")

else:
    # ƒ∞lk a√ßƒ±lƒ±≈ü ekranƒ± - Modern talimat √ßubuƒüu
    st.markdown("""
    <div class="instruction-banner">
        <p class="instruction-text">
            üëà Sol men√ºden <strong>'üìÇ Klas√∂r Se√ß'</strong> butonuna tƒ±klayƒ±n ve klas√∂r√º se√ßin, 
            sonra <strong>'üöÄ Analizi Ba≈ülat'</strong> butonuna tƒ±klayƒ±n
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # √ñzellikler - Modern kartlar
    st.markdown("## ‚ú® √ñzellikler")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-title">
                üìä Analiz
            </div>
            <ul class="feature-list">
                <li class="feature-item">‚öôÔ∏è Java sƒ±nƒ±f ve metodlarƒ±</li>
                <li class="feature-item">üåê REST endpoint tespiti</li>
                <li class="feature-item">üóÑÔ∏è SQL/JDBC kullanƒ±mƒ±</li>
                <li class="feature-item">üì° HTTP √ßaƒürƒ±larƒ±</li>
                <li class="feature-item">üì± SAPUI5/Fiori desteƒüi <span class="ai-badge">‚≠ê</span></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-title">
                üîó Entegrasyon
            </div>
            <ul class="feature-list">
                <li class="feature-item">‚ö° MII BLS/Transaction</li>
                <li class="feature-item">üîå WSDL/SOAP servisleri</li>
                <li class="feature-item">‚öôÔ∏è Config dosyalarƒ±</li>
                <li class="feature-item">üóÑÔ∏è Veritabanƒ± baƒülantƒ±larƒ±</li>
                <li class="feature-item">üìã manifest.json parsing <span class="ai-badge">‚≠ê</span></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-title">
                üìà √áƒ±ktƒ±lar
            </div>
            <ul class="feature-list">
                <li class="feature-item">üìÑ Mimari √∂zet raporu</li>
                <li class="feature-item">üéì Eƒüitim d√∂k√ºmanƒ±</li>
                <li class="feature-item">üó∫Ô∏è Mermaid diyagram</li>
                <li class="feature-item">üìä JSON ili≈üki verileri</li>
                <li class="feature-item">üì± SAPUI5 detaylarƒ± <span class="ai-badge">‚≠ê</span></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # AI ve Geli≈ümi≈ü √ñzellikler b√∂l√ºm√º
    st.markdown("## ü§ñ AI Destekli √ñzellikler")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-title">
                üß† AI Agent Dashboard
            </div>
            <ul class="feature-list">
                <li class="feature-item">üé® ƒ∞nteraktif grafikler</li>
                <li class="feature-item">ü§ñ AI chat aray√ºz√º</li>
                <li class="feature-item">üìä Ger√ßek zamanlƒ± analiz</li>
                <li class="feature-item">üó∫Ô∏è Navigasyon haritalarƒ±</li>
                <li class="feature-item">üè≠ ME/MII entegrasyon analizi</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-title">
                üìö Documentation Agent
            </div>
            <ul class="feature-list">
                <li class="feature-item">üéì Teknik eƒüitim materyali</li>
                <li class="feature-item">üß™ QA test senaryolarƒ±</li>
                <li class="feature-item">üîç Mimari deƒüi≈üiklik analizi</li>
                <li class="feature-item">üõ°Ô∏è G√ºvenlik test senaryolarƒ±</li>
                <li class="feature-item">üìä Performans test senaryolarƒ±</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>SAPDOCAI v1.1.0 (Extended) | Made with ‚ù§Ô∏è using Streamlit</p>
</div>
""", unsafe_allow_html=True)
